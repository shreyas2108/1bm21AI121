#include <iostream>
#include <vector>
#include <random>
#include <chrono>
using namespace std;
using namespace std::chrono;


void heapify(vector<int>& arr, int n, int i) {
    int largest = i;  
    int left = 2 * i + 1;  
    int right = 2 * i + 2;  

 
    if (left < n && arr[left] > arr[largest])
        largest = left;

 
    if (right < n && arr[right] > arr[largest])
        largest = right;


    if (largest != i) {
        swap(arr[i], arr[largest]);

     
        heapify(arr, n, largest);
    }
}


void heapSort(vector<int>& arr) {
    int n = arr.size();

    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

  
    for (int i = n - 1; i > 0; i--) {
      
        swap(arr[0], arr[i]);

        heapify(arr, i, 0);
    }
}

int main() {
    int choice;
    cout << "1. Manual entry of array\n";
    cout << "2. Generate random array\n";
    cout << "Enter your choice: ";
    cin >> choice;

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> arr(n);

    if (choice == 1) {
        cout << "Enter the array elements:\n";
        for (int i = 0; i < n; i++)
            cin >> arr[i];
    } else if (choice == 2) {
        // Generate random array elements
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> dis(1, 100000);

        for (int i = 0; i < n; i++)
            arr[i] = dis(gen);
    } else {
        cout << "Invalid choice.\n";
        return 1;
    }

    auto start = high_resolution_clock::now();
    heapSort(arr);
    auto stop = high_resolution_clock::now();

    auto duration = duration_cast<microseconds>(stop - start);

    cout << "Sorted array:\n";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << "\nTime taken by function: " << duration.count() << " microseconds\n";

    return 0;
}

